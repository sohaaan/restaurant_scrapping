# -*- coding: utf-8 -*-
"""restaurant_scrapping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YhRooeQSlmET_p-3upwKBbtzJPXwFCkH

First import the necessary library
"""

import pandas as pd #to manipulate dataframe
import requests #to get the data from the url
import json #to handle json data from the url
import time #to add some delay so that google API have some time to varify the page token

"""In order to find restaurants around a place we need the coordinate of the place and then we will find for results around a certain radius.

For example, I took radius 1000m while searching for restaurants around Mirpur-1. We need to be careful about the radius becasue with googgle API we can at best retrieve **60** results per request. So if the place is very popluated like Dhaka City radious should be small so that we don't miss any restaurant. In my case I took 1km radius as it showed 58 results so I guess I did not miss any restaurant

We can set different coordinates by a generous distance so that it cover all restaurants of the area and later in cleaning phase we will remove the duplicates

I only focus on Mirpur area. I took 4 spots which I will use to retrieve the data around

I will search retaruants in terms of keywords. It will get places which's type is restaruant, has restaurant in their name and recognized as place for eating
"""

# Parameters
coordinates = ['23.799378,90.352992','23.817345,90.372628','23.784263,90.361646','23.801518,90.378728']
keyword = 'restaurant'
radius = '1000'
api_key = 'AIzaSyD1qkItnF9DfuqEyaA6NIyfB11W2G2udyI'
final_data = []
price_stars = ['*','**','***','****']

"""Then we will generate the url with all the necessary links and the send a get request for data

Data will be recived in a Json file than will be sotred in `final_data` list
"""

for coordinate in coordinates:
  url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location='+coordinate+'&radius='+str(radius)+'&keyword='+str(keyword)+'&key='+str(api_key)
  while True:
    print(url)
    response = requests.get(url)
    js = json.loads(response.text)
    results = js['results']
    for result in results:
      name = result['name']
      lat = result['geometry']['location']['lat']
      lng = result['geometry']['location']['lng']

      if 'rating' in result: #some restaurants aren't yet rated. so we need a condition for them
        rating = result['rating']
      else:
        rating = 'NA'

      if 'user_ratings_total' in result: #for nor rated restaurants the number of people will be 0
        total_rating = result['user_ratings_total']
      else:
        total_rating = 0

      if 'price_level' in result: #similarly some restaurants have no price level. we will put NA in there
        price = result['price_level']
        prices = price_stars[int(price)-1]
      else:
        prices = 'NA'
        
      data = [name, lat, lng, rating, total_rating, prices]
      final_data.append(data)
    time.sleep(2)
    if 'next_page_token' not in js:
      break
    else:
      next_page_token = js['next_page_token']
      url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?key='+str(api_key)+'&pagetoken='+str(next_page_token)

"""Now we will take all data from `final_data` to `df` dataframe

"""

labels = ['Place Name', 'Latitude', 'Longitude','Rating', 'Number of People Rated', 'Price Level']
df= pd.DataFrame.from_records(final_data, columns=labels)

df

"""Now, becasue of overlapping of areas there will be some restaurants which will appear twice. We will remove those by using pandas `drop_duplicates` function"""

df.drop_duplicates(keep='first', inplace= True)

df

"""Finally we will convert the dataframe df to csv file and save it"""

df.to_csv('restarants_mipur.csv')

"""# Notes:


1. Radius is very important. If we want to retrieve data from a populated place we should keep the radius very  small so that, we don't lose any restaurant. In case of not very popular place we cane provide radius of very big number, this way we can get the data with less number of get request
2. Sometimes restaurants are named as hotel in our country. We can include those by using a keyowrd named 'hotel' but it may confuse with the residential hotels. So I exclude that.


"""